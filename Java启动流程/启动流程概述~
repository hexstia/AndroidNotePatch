Android系统的本地部分启动完成之后，将形成一些列运行的守护进程。其中的名称为zygote的守护进程将继续完成java部分能的初始化，java部分初始化结束后，形成zygote，systemServer以及若干个Java应用的进程，系统进入正常运行阶段。
Java的启动流程可以分成以下几个步骤。
1.从本地可执行程序运行名为zygote的守护进程
2.zygote运行zygoteInit(进入java程序)
3.ZygoteInit 运行SystemServer(Java类)，并分裂出一个新的进程
4.SystemServer 首先运行libandroid_servers.so库当中初始化（进入本地程序）
5.执行libandroid_servers.so当中的系统初始化。调用system_init()函数进入
6.SystemServer中的java初始化再次被调用(再入Java程序)
7.建立ServerThread线程建立各个服务，然后进入循环.
8.ActivityManagerService服务在启动结束发送相关消息.
9.各个Java应用程序运行

关于路径的方式：首先为init.rc--->init.zygote32_64.rc--->开启进程
实际上是/system/bin/app_proess32或者是64
该可执行程序的源码在framework/base/cmds/app_process 链接libandroid_runtime.so动态库 间接链接libdvm.so库调用虚拟机
在守护进程zygote运行后com.android.internal.os.ZygoteInit进入Java环境运行,
zygoteInit是java框架库中的内部类代码在framework/base/core/java/com/android/internal/os
--->main方法是一个android系统正常运行之后所执行的第一段Java代码.
  if (startSystemServer) {
                startSystemServer(abiList, socketName);
            }
开启ststemserver在zygoteinit.java
forkSystemServer方法，它是一个native方法对应的源文件在dalvik\vm\native\dalvik_system_Zygote.cpp
在forkAndSpecializeCommon方法中，我们创建了子进程，并返回了子进程id，接下来我检查如果system_server进程是否退出，若是的话则zygote进程也将会被被干掉，由此可见其重要(在此方法中调用了fork（）创建出进程)
===========================
setSignalHandler();
这里我们发现我们之前已经看到在forkSystemServer方法中已经检查过system_server进程是否死亡，为什么这里还要再一次进行检查？这是为了防止在我们还没有得到fork子进程的pid时，system_server进程就已经死亡的情况。

总结一下：system_server进程的创建经历了漫长的历程：首先startSystemServer中调用了native方法forkSystemServer；之后在native方法forkSystemServer中调用了forkAndSpecializeCommon方法；在forkAndSpecializeCommon方法中fork之前还调用了setSignalHandler来设置信号处理项。这样，我们的system_server进程终于被创建起来，同时他还和zygote进程保持着同生共死的关系。
=============================================================================================
在startSystemServer的方法中我们可以看到，在创建进程之后，在子进程即system_server进程中会执行handleSystemServerProcess方法，这便是system_server的职责所在，
可以看到最后system_server进程来到了RuntimeInit中，它的实现在frameworks\base\core\java\com\android\internal\os\RuntimeInit.java中

handleSystemServerProcess-->调用了RuntimeInit.zygoteInit---->
//关闭System.out和System.err，使用Android log
        redirectLogStreams();
        //做一些常规初始化
        commonInit();
        //native层初始化,调用此方法之后system_server将与Binder通信系统建立联系，这样就可以使用Binder了
        nativeZygoteInit();
最终，system_server开启了一个新的线程，并执行了它的initAndLoop方法，其也被定义在SystemServer.java中，该方法的代码较多，其主要的工作就是开启了系统中的各项服务，如电池服务，蓝牙服务等等。并调用了Looper的prepareMainLooper方法进行消息循环，然后处理消息，这里不再赘述。

最后，我们来总结一下：
首先system_server执行handleSystemServerProcess方法来完成自己的使命； 之后调用RuntimeInit.zygoteInit方法，在这里我们进行了一些常规的初始化工作已经native层的初始化，从而与Binder通信建立联系； 之后调用invokeStaticMain方法，利用抛出异常的方法在ZygoteInit的main方法中截获并去执行SystemServer的main方法； 在SystemServer的main方法中，我调用nativeInit方法去初始化一些传感器服务，并开启了单独的线程去开启Android系统中的各项服务，并调用了Looper的prepareMainLooper方法进行消息循环，然后处理消息                                                     
